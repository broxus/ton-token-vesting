.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor Vesting
;; if
GETGLOB 2
NEQINT 0
PUSHCONT {
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	;; ==
	GETGLOB 2
	EQUAL
	THROWIFNOT 103
	;; get member balance
	GETPARAM 7
	INDEX 0
	;; >=
	PUSHINT 2000000000
	GEQ
	THROWIFNOT 104
	ACCEPT
}
PUSHCONT {
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	;; >=
	PUSHINT 2000000000
	GEQ
	THROWIFNOT 104
}
IFELSE
;; end if
;; get member value
;; push identifier beneficiary
GETGLOB 13
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 105
;; push identifier step
GETGLOB 16
;; <=
;; push identifier duration
GETGLOB 15
LEQ
THROWIFNOT 106
;; get member value
;; push identifier tokenRoot
GETGLOB 12
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 107
;; push identifier duration
GETGLOB 15
GTINT 0
THROWIFNOT 108
;; push identifier startTime
GETGLOB 14
;; >
;; push identifier now
NOW
GREATER
THROWIFNOT 109
; expValue
; end expValue
;; push identifier startTime
GETGLOB 14
; colValue
SETGLOB 20
; end colValue
; function _deployWallets
;; Remote call IRootTokenContract.deployEmptyWallet
;; push identifier tokenRoot
GETGLOB 12
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x41dcd6500000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x542b1672
;; deploy_grams
PUSHINT 300000000
STUR 128
;; wallet_public_key
PUSHINT 0
STUR 256
;; owner_address
MYADDR
STSLICER
;; gas_back_address
;; push identifier owner
GETGLOB 11
STSLICER
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IRootTokenContract.deployEmptyWallet
;; push identifier tokenRoot
GETGLOB 12
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x41dcd6500000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x542b1672
;; deploy_grams
PUSHINT 300000000
STUR 128
;; wallet_public_key
PUSHINT 0
STUR 256
;; owner_address
;; push identifier beneficiary
GETGLOB 13
STSLICER
;; gas_back_address
;; push identifier owner
GETGLOB 11
STSLICER
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IRootTokenContract.sendExpectedWalletAddress
;; push identifier tokenRoot
GETGLOB 12
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x55b3a9fb
;; wallet_public_key_
PUSHINT 0
STUR 256
;; owner_address_
MYADDR
STSLICER
;; to
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
; end function _deployWallets
; end constructor Vesting
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro release
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $release_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	release_internal
.type	release_internal, @function
CALL $release_internal_macro$

.macro release_internal_macro
; modifier onlyBeneficiary
;; get member sender
GETGLOB 9
;; push identifier beneficiary
GETGLOB 13
SDEQ
THROWIFNOT 102
; function release
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 117
CALLREF {
	CALL $_status_internal_macro$
}
;; ==
;; get member Active
PUSHINT 3
EQUAL
THROWIFNOT 110
CALLREF {
	CALL $_releasableAmount_internal_macro$
}
;; decl: amountToRelease
;; push identifier amountToRelease
DUP
GTINT 0
THROWIFNOT 111
; function _reserve
PUSHINT 500000000
PUSHINT 2
RAWRESERVE
; end function _reserve
;; if
;; push identifier amountToRelease
DUP
;; >
;; push identifier balance
GETGLOB 22
GREATER
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier balance
	GETGLOB 22
	; colValue
	NIP
	; end colValue
	; expValue
	; end expValue
	PUSHINT 0
	; colValue
	SETGLOB 22
	; end colValue
}
PUSHCONT {
	;; push identifier amountToRelease
	DUP
	; expValue
	;; fetch balance
	GETGLOB 22
	; end expValue
	SWAP
	SUB
	UFITS 128
	; colValue
	SETGLOB 22
	; end colValue
}
IFELSE
;; end if
; expValue
; end expValue
;; push identifier now
NOW
; colValue
SETGLOB 20
; end colValue
;; push identifier beneficiary
GETGLOB 13
;; push identifier amountToRelease
PUSH S1
;; push identifier beneficiary
GETGLOB 13
CALLREF {
	CALL $sendTokens_internal_macro$
}
DROP
; end function release
; end modifier onlyBeneficiary

.macro revoke
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $revoke_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	revoke_internal
.type	revoke_internal, @function
CALL $revoke_internal_macro$

.macro revoke_internal_macro
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 11
SDEQ
THROWIFNOT 101
; function revoke
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 112
;; push identifier revocable
GETGLOB 17
THROWIFNOT 113
; function _reserve
PUSHINT 500000000
PUSHINT 2
RAWRESERVE
; end function _reserve
; expValue
; end expValue
TRUE
; colValue
SETGLOB 18
; end colValue
;; Remote call ITONTokenWallet.balance
;; push identifier tokenWallet
GETGLOB 19
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x4969587f
STSLICECONST x0c4c070b
ENDC
PUSHINT 128
SENDRAWMSG
; end function revoke
; end modifier onlyOwner

.macro releasableAmount
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
CALLREF {
	CALL $releasableAmount_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe8fbc986
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	releasableAmount_internal
.type	releasableAmount_internal, @function
CALL $releasableAmount_internal_macro$

.macro releasableAmount_internal_macro
; function releasableAmount
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
CALLREF {
	CALL $_releasableAmount_internal_macro$
}
; end function releasableAmount

.macro getDetails
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
CALLREF {
	CALL $getDetails_internal_macro$
}
;; emitting 12 value(s)
PUSH S12
EQINT -1
PUSHCONT {
	PUSH S14
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xd7af6096
	PUSH S13
	STSLICER
	PUSH S12
	STSLICER
	PUSH S11
	STSLICER
	PUSH S10
	STUR 32
	PUSH S9
	STUR 32
	NEWC
	PUSH S9
	STUR 32
	PUSH S8
	STUR 32
	PUSH S7
	STIR 1
	PUSH S6
	STIR 1
	PUSH S5
	STUR 128
	PUSH S4
	STUR 128
	PUSH S3
	STUR 8
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S13
	STSLICER
	PUSH S12
	STSLICER
	PUSH S11
	STSLICER
	PUSH S10
	STUR 32
	PUSH S9
	STUR 32
	NEWC
	PUSH S9
	STUR 32
	PUSH S8
	STUR 32
	PUSH S7
	STIR 1
	PUSH S6
	STIR 1
	PUSH S5
	STUR 128
	PUSH S4
	STUR 128
	PUSH S3
	STUR 8
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
BLKDROP 12
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getDetails_internal
.type	getDetails_internal, @function
CALL $getDetails_internal_macro$

.macro getDetails_internal_macro
;; ret param: owner_
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: tokenRoot_
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: beneficiary_
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: startTime_
PUSHINT 0
;; ret param: duration_
PUSHINT 0
;; ret param: step_
PUSHINT 0
;; ret param: lastWithdraw_
PUSHINT 0
;; ret param: revocable_
PUSHINT 0
;; ret param: revoked_
PUSHINT 0
;; ret param: initialBalance_
PUSHINT 0
;; ret param: balance_
PUSHINT 0
;; ret param: status_
PUSHINT 0
; function getDetails
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier owner
GETGLOB 11
;; push identifier tokenRoot
GETGLOB 12
;; push identifier beneficiary
GETGLOB 13
;; push identifier startTime
GETGLOB 14
;; push identifier duration
GETGLOB 15
;; push identifier step
GETGLOB 16
;; push identifier lastWithdraw
GETGLOB 20
;; push identifier revocable
GETGLOB 17
;; push identifier revoked
GETGLOB 18
;; push identifier initialBalance
GETGLOB 21
;; push identifier balance
GETGLOB 22
CALLREF {
	CALL $_status_internal_macro$
}
BLKDROP2 12, 12
; end function getDetails

.macro status
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
CALLREF {
	CALL $status_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe750af70
	PUSH S1
	STUR 8
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 8
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	status_internal
.type	status_internal, @function
CALL $status_internal_macro$

.macro status_internal_macro
; function status
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
CALLREF {
	CALL $_status_internal_macro$
}
; end function status

.macro onGetBalanceRevoke
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode walletBalance
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: walletBalance
CALLREF {
	CALL $onGetBalanceRevoke_internal_macro$
}
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	onGetBalanceRevoke_internal
.type	onGetBalanceRevoke_internal, @function
CALL $onGetBalanceRevoke_internal_macro$

.macro onGetBalanceRevoke_internal_macro
;; param: walletBalance
; function onGetBalanceRevoke
;; get member sender
GETGLOB 9
;; push identifier tokenWallet
GETGLOB 19
SDEQ
THROWIFNOT 114
; function _reserve
PUSHINT 500000000
PUSHINT 2
RAWRESERVE
; end function _reserve
;; push identifier owner
GETGLOB 11
;; push identifier walletBalance
PUSH S1
;; push identifier owner
GETGLOB 11
CALLREF {
	CALL $sendTokens_internal_macro$
}
; end function onGetBalanceRevoke
DROP

.macro tokensReceivedCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode token_wallet
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode tokens_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode 
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode 
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode sender_wallet
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode original_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode 
;; decode TvmCell
LDREF
ENDS
;; param: token_wallet
;; param: 
;; param: tokens_amount
;; param: 
;; param: 
;; param: sender_wallet
;; param: original_gas_to
;; param: 
;; param: 
CALLREF {
	CALL $tokensReceivedCallback_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	tokensReceivedCallback_internal
.type	tokensReceivedCallback_internal, @function
CALL $tokensReceivedCallback_internal_macro$

.macro tokensReceivedCallback_internal_macro
;; param: token_wallet
;; param: 
;; param: tokens_amount
;; param: 
;; param: 
;; param: sender_wallet
;; param: original_gas_to
;; param: 
;; param: 
; function tokensReceivedCallback
;; get member sender
GETGLOB 9
;; push identifier token_wallet
PUSH S9
SDEQ
THROWIFNOT 115
; function _reserve
PUSHINT 500000000
PUSHINT 2
RAWRESERVE
; end function _reserve
;; if
;; get member sender
GETGLOB 9
;; push identifier tokenWallet
GETGLOB 19
SDEQ
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	CALLREF {
		CALL $_status_internal_macro$
	}
	;; ==
	;; get member WaitingForTokens
	PUSHINT 1
	EQUAL
}
IF
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier tokens_amount
	PUSH S6
	; colValue
	SETGLOB 21
	; end colValue
	; expValue
	; end expValue
	;; push identifier initialBalance
	GETGLOB 21
	; colValue
	SETGLOB 22
	; end colValue
	;; transfer()
	;; push identifier original_gas_to
	PUSH S2
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
PUSHCONT {
	NEWC
	ENDC
	;; decl: empty
	;; Remote call ITONTokenWallet.transfer
	;; get member sender
	GETGLOB 9
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x4bf160e2
	;; to
	;; push identifier sender_wallet
	PUSH S6
	STSLICER
	;; tokens
	;; push identifier tokens_amount
	PUSH S9
	STUR 128
	;; grams
	PUSHINT 0
	STUR 128
	;; send_gas_to
	;; push identifier original_gas_to
	PUSH S5
	STSLICER
	;; notify_receiver
	FALSE
	STIR 1
	;; payload
	;; push identifier empty
	PUSH S2
	STREFR
	STBREFR
	ENDC
	PUSHINT 128
	SENDRAWMSG
	DROP
}
IFELSE
;; end if
; end function tokensReceivedCallback
BLKDROP 9

.macro expectedWalletAddressCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode wallet
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owner_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: wallet
;; param: 
;; param: owner_address
CALLREF {
	CALL $expectedWalletAddressCallback_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	expectedWalletAddressCallback_internal
.type	expectedWalletAddressCallback_internal, @function
CALL $expectedWalletAddressCallback_internal_macro$

.macro expectedWalletAddressCallback_internal_macro
;; param: wallet
;; param: 
;; param: owner_address
; function expectedWalletAddressCallback
;; get member sender
GETGLOB 9
;; push identifier tokenRoot
GETGLOB 12
SDEQ
THROWIFNOT 116
;; push identifier owner_address
DUP
MYADDR
SDEQ
THROWIFNOT 114
; function _reserve
PUSHINT 500000000
PUSHINT 2
RAWRESERVE
; end function _reserve
; expValue
; end expValue
;; push identifier wallet
PUSH S2
; colValue
SETGLOB 19
; end colValue
;; Remote call ITONTokenWallet.setReceiveCallback
;; push identifier wallet
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x71eee875
;; receive_callback
MYADDR
STSLICER
;; allow_non_notifiable
FALSE
STIR 1
ENDC
PUSHINT 128
SENDRAWMSG
; end function expectedWalletAddressCallback
BLKDROP 3

.globl	_status_internal
.type	_status_internal, @function
CALL $_status_internal_macro$

.macro _status_internal_macro
;; ret param: retParam@0
PUSHINT 0
; function _status
PUSHCONT {
	;; if
	;; get member value
	;; push identifier tokenWallet
	GETGLOB 19
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	PUSHCONT {
		;; return
		;; get member Initializing
		PUSHINT 0
		NIP
		RET
	}
	IFNOTJMP
	;; end if
	;; if
	;; push identifier initialBalance
	GETGLOB 21
	PUSHCONT {
		;; return
		;; get member WaitingForTokens
		PUSHINT 1
		NIP
		RET
	}
	IFNOTJMP
	;; end if
	;; if
	;; push identifier revoked
	GETGLOB 18
	PUSHCONT {
		;; return
		;; get member Revoked
		PUSHINT 5
		NIP
		RET
	}
	IFJMP
	;; end if
	;; if
	;; push identifier balance
	GETGLOB 22
	PUSHCONT {
		;; return
		;; get member Released
		PUSHINT 4
		NIP
		RET
	}
	IFNOTJMP
	;; end if
	;; if
	;; push identifier now
	NOW
	;; <
	;; push identifier startTime
	GETGLOB 14
	LESS
	PUSHCONT {
		;; return
		;; get member Pending
		PUSHINT 2
		NIP
		RET
	}
	IFJMP
	;; end if
	;; return
	;; get member Active
	PUSHINT 3
	NIP
}
CALLX
; end function _status

.globl	sendTokens_internal
.type	sendTokens_internal, @function
CALL $sendTokens_internal_macro$

.macro sendTokens_internal_macro
;; param: to
;; param: amount
;; param: sendGasTo
; function sendTokens
NEWC
ENDC
;; decl: payload
;; Remote call ITONTokenWallet.transferToRecipient
;; push identifier tokenWallet
GETGLOB 19
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x3f10d1ab
;; recipient_public_key
PUSHINT 0
STUR 256
;; recipient_address
;; push identifier to
PUSH S5
STSLICER
;; tokens
;; push identifier amount
PUSH S4
STUR 128
;; deploy_grams
PUSHINT 0
STUR 128
;; transfer_grams
PUSHINT 0
STUR 128
NEWC
;; send_gas_to
;; push identifier sendGasTo
PUSH S4
STSLICER
;; notify_receiver
FALSE
STIR 1
;; payload
;; push identifier payload
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function sendTokens
BLKDROP 3

.globl	_releasableAmount_internal
.type	_releasableAmount_internal, @function
CALL $_releasableAmount_internal_macro$

.macro _releasableAmount_internal_macro
;; ret param: retParam@0
PUSHINT 0
; function _releasableAmount
PUSHCONT {
	;; if
	;; push identifier now
	NOW
	;; <
	;; push identifier lastWithdraw
	GETGLOB 20
	;; +
	;; push identifier step
	GETGLOB 16
	ADD
	UFITS 32
	LESS
	PUSHCONT {
		;; return
		PUSHINT 0
		NIP
		RET
	}
	IFJMP
	;; end if
	;; if
	;; push identifier now
	NOW
	;; >=
	;; push identifier startTime
	GETGLOB 14
	;; +
	;; push identifier duration
	GETGLOB 15
	ADD
	UFITS 32
	GEQ
	PUSHCONT {
		;; return
		;; push identifier initialBalance
		GETGLOB 21
		NIP
		RET
	}
	PUSHCONT {
		;; return
		;; push identifier initialBalance
		GETGLOB 21
		;; /
		;; push identifier duration
		GETGLOB 15
		;; /
		;; push identifier step
		GETGLOB 16
		DIV
		DIV
		;; *
		;; push identifier now
		NOW
		;; -
		;; push identifier lastWithdraw
		GETGLOB 20
		SUB
		UFITS 32
		;; /
		;; push identifier step
		GETGLOB 16
		DIV
		MUL
		UFITS 128
		NIP
		RET
	}
	CONDSEL
	JMPX
	;; end if
}
CALLX
; end function _releasableAmount

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 12
GETGLOB 13
GETGLOB 19
REVERSE 4, 0
STSLICE
STSLICE
STSLICE
NEWC
GETGLOB 21
GETGLOB 22
XCHG s2
STU 128
STU 128
GETGLOB 10
GETGLOB 11
GETGLOB 14
GETGLOB 15
GETGLOB 16
GETGLOB 17
GETGLOB 18
GETGLOB 20
REVERSE 11, 0
STBREF
STBREF
STU 256
STSLICE
STU 32
STU 32
STU 32
STI 1
STI 1
STU 32
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
LDMSGADDR
SETGLOB 19
SETGLOB 13
SETGLOB 12
LDREFRTOS
LDU 128
PLDU 128
SETGLOB 22
SETGLOB 21
LDU 256
LDMSGADDR
LDU 32
LDU 32
LDU 32
LDI 1
LDI 1
PLDU 32
SETGLOB 20
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	SETGLOB 19
	SETGLOB 13
	SETGLOB 12
	LDREFRTOS
	LDU 128
	PLDU 128
	SETGLOB 22
	SETGLOB 21
	LDU 256
	LDMSGADDR
	LDU 32
	LDU 32
	LDU 32
	LDI 1
	LDI 1
	PLDU 32
	SETGLOB 20
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init owner
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 11
	; init tokenRoot
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 12
	; init beneficiary
	PUSHINT 4
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 13
	; init startTime
	PUSHINT 5
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 14
	; init duration
	PUSHINT 6
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 15
	; init step
	PUSHINT 7
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 16
	; init revocable
	PUSHINT 8
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDI 1
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 17
	; init revoked
	PUSHINT 0
	SETGLOB 18
	; init tokenWallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 19
	; init lastWithdraw
	PUSHINT 0
	SETGLOB 20
	; init initialBalance
	PUSHINT 0
	SETGLOB 21
	; init balance
	PUSHINT 0
	SETGLOB 22
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro _randomNonce
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 10
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbb53331f
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro owner
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 11
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xdf0bcfde
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro tokenRoot
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 12
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xfcbfaaf2
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro beneficiary
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 13
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe10e8659
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro startTime
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 14
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xfcb81570
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro duration
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 15
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xb0d7f903
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro step
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 16
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf0592b1d
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro revocable
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 17
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe98bf2b0
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro revoked
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 18
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd1e947b9
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro tokenWallet
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 19
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf1030b6b
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro lastWithdraw
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 20
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd0f9f227
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro initialBalance
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 21
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xaccb8d68
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro balance
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 22
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x866db788
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 995308319
LEQ
PUSHCONT {
	DUP
	PUSHINT 206309131
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 107853704
		EQUAL
		IFJMPREF {
			CALL $balance$
		}
		DUP
		PUSHINT 206309131
		EQUAL
		IFJMPREF {
			CALL $onGetBalanceRevoke$
		}
	}
	IFJMP
	DUP
	PUSHINT 751537512
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 292780380
		EQUAL
		IFJMPREF {
			CALL $expectedWalletAddressCallback$
		}
		DUP
		PUSHINT 751537512
		EQUAL
		IFJMPREF {
			CALL $initialBalance$
		}
	}
	IFJMP
	DUP
	PUSHINT 995308319
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 819460355
		EQUAL
		IFJMPREF {
			CALL $duration$
		}
		DUP
		PUSHINT 995308319
		EQUAL
		IFJMPREF {
			CALL $_randomNonce$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1497440185
LEQ
PUSHCONT {
	DUP
	PUSHINT 1286874325
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1013166213
		EQUAL
		IFJMPREF {
			CALL $release$
		}
		DUP
		PUSHINT 1286874325
		EQUAL
		IFJMPREF {
			CALL $revoke$
		}
	}
	IFJMP
	DUP
	PUSHINT 1374242745
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1358557735
		EQUAL
		IFJMPREF {
			CALL $lastWithdraw$
		}
		DUP
		PUSHINT 1374242745
		EQUAL
		IFJMPREF {
			CALL $revoked$
		}
	}
	IFJMP
	DUP
	PUSHINT 1497440185
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1471111318
		EQUAL
		IFJMPREF {
			CALL $getDetails$
		}
		DUP
		PUSHINT 1497440185
		EQUAL
		IFJMPREF {
			CALL $tokensReceivedCallback$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1770779312
LEQ
PUSHCONT {
	DUP
	PUSHINT 1628341849
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1594609630
		EQUAL
		IFJMPREF {
			CALL $owner$
		}
		DUP
		PUSHINT 1628341849
		EQUAL
		IFJMPREF {
			CALL $beneficiary$
		}
	}
	IFJMP
	DUP
	PUSHINT 1756716863
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1733341040
		EQUAL
		IFJMPREF {
			CALL $status$
		}
		DUP
		PUSHINT 1756716863
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
	}
	IFJMP
	DUP
	PUSHINT 1770779312
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1761331590
		EQUAL
		IFJMPREF {
			CALL $releasableAmount$
		}
		DUP
		PUSHINT 1770779312
		EQUAL
		IFJMPREF {
			CALL $revocable$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 2092935922
LEQ
PUSHCONT {
	DUP
	PUSHINT 1884891933
	EQUAL
	IFJMPREF {
		CALL $step$
	}
	DUP
	PUSHINT 1896024939
	EQUAL
	IFJMPREF {
		CALL $tokenWallet$
	}
	DUP
	PUSHINT 2092438896
	EQUAL
	IFJMPREF {
		CALL $startTime$
	}
	DUP
	PUSHINT 2092935922
	EQUAL
	IFJMPREF {
		CALL $tokenRoot$
	}
}
IFJMP
